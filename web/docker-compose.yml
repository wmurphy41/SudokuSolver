# Docker Compose configuration for SudokuSolver web application
# This file defines the services needed to run the full-stack application

services:
  # FastAPI backend service
  backend:
    # Build the backend with context at project root to access src/
    build:
      context: ..
      dockerfile: web/backend/Dockerfile
    
    # Container name for easy reference
    container_name: sudoku-backend
    
    # Expose port 8000 internally (not accessible from host)
    # The nginx service will proxy requests to this port
    expose:
      - "8000"
    
    # Restart policy: restart unless manually stopped
    restart: unless-stopped
    
    # Environment variables (add as needed)
    environment:
      - PYTHONUNBUFFERED=1
      # - DATABASE_URL=postgresql://user:pass@db:5432/sudoku
      # - REDIS_URL=redis://redis:6379
    
    # Health check to ensure service is running
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx + React frontend service
  web:
    # Build the frontend with context including nginx config
    build:
      context: .
      dockerfile: frontend/Dockerfile
    
    # Container name for easy reference
    container_name: sudoku-web
    
    # Map host port 80 to container port 80
    # This makes the application accessible at http://localhost
    ports:
      - "80:80"
    
    # This service depends on the backend service
    # Docker will start backend first, then web
    depends_on:
      backend:
        condition: service_healthy
    
    # Restart policy: restart unless manually stopped
    restart: unless-stopped
    
    # Health check to ensure nginx is serving content
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Optional: Add volumes for persistent data
# volumes:
#   # Uncomment if you need to persist data
#   # postgres_data:
#   # redis_data:

# Optional: Add networks for service isolation
# networks:
#   default:
#     name: sudoku-network
